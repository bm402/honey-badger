{"version":3,"sources":["components/navbar.js","components/about.js","components/heatmap-layer.js","components/heatmap.js","components/stats-map-layer.js","images/gold.jpg","images/silver.jpg","images/bronze.jpg","components/podium.js","components/stats.js","components/live-log-entry.js","components/live-logs.js","components/main.js","App.js","index.js"],"names":["Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Link","About","className","Button","variant","HeatmapLayer","map","useMap","useEffect","fetch","then","res","json","rawData","heatmap_data_points","rawDataPoints","sortedDataPoints","point","lat","lon","count","sort","a","b","flattenedCount","lastCount","i","length","maxCount","normalisedDataPoints","L","heatLayer","minOpacity","maxZoom","radius","blur","gradient","0.4","0.6","0.8","0.9","1","addTo","markerBounds","latLngBounds","forEach","normalisedDataPoint","extend","fitBounds","catch","console","log","Heatmap","MapContainer","TileLayer","attribution","url","StatsMapLayer","props","mapData","mapDataItem","Podium","useState","showDetail","setShowDetail","detailPosition","setDetailPosition","handleShowDetail","position","createModalMetadata","metadata","Object","keys","key","title","formatModalMetadataItemValue","value","Array","isArray","localeCompare","join","CardDeck","Card","Body","Text","onClick","Img","src","GoldMedal","isDataLoaded","type","data","Footer","SilverMedal","BronzeMedal","Modal","show","onHide","Header","closeButton","Title","map_data","Marker","Popup","Stats","setIsDataLoaded","statsData","setStatsData","most_connections","most_active_cities","most_active_countries","most_ip_addresses","most_ingress_ports","LiveLogEntry","isOpen","setIsOpen","Date","logEntry","timestamp","toLocaleString","ingress_port","ip_address","city","country","input","LiveLogs","websocket","setWebsocket","isListening","setIsListening","status","setStatus","logEntries","setLogEntries","disabled","WebSocket","onopen","onmessage","message","JSON","parse","onclose","close","Table","striped","bordered","hover","size","Main","exact","path","component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.efd40473.chunk.js","sourcesContent":["import BSNavbar from 'react-bootstrap/Navbar';\nimport BSNav from 'react-bootstrap/Nav'\n\nconst Navbar = () => {\n    return (    \n        <BSNavbar bg=\"light\" expand=\"lg\">\n            <BSNavbar.Brand href=\"/honey-badger/#/\">Honey Badger</BSNavbar.Brand>\n            <BSNavbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <BSNavbar.Collapse id=\"basic-navbar-nav\">\n                <BSNav>\n                    <BSNav.Link href=\"/honey-badger/#/heatmap\">Heatmap</BSNav.Link>\n                </BSNav>\n                <BSNav>\n                    <BSNav.Link href=\"/honey-badger/#/stats\">Stats</BSNav.Link>\n                </BSNav>\n                <BSNav>\n                    <BSNav.Link href=\"/honey-badger/#/live-logs\">Live logs</BSNav.Link>\n                </BSNav>\n            </BSNavbar.Collapse>\n        </BSNavbar>\n    );\n};\n\nexport default Navbar;\n","import Button from 'react-bootstrap/Button'\n\nimport './about.css'\n\nconst About = () => {\n    return (\n        <div className=\"about-page\">\n            <h2>Welcome to Honey Badger</h2>\n            <p>\n                The internet is a big mysterious black box of machines communicating with one another.\n                Ever wondered how much communication is going on behind your back? Or which far corner\n                of the world is getting in touch with your home router to see whether it is running\n                outdated software and is vulnerable to a cyber attack?\n            </p>\n            <p>\n                Honey Badger is a honeypot application that allows you to see just how much traffic an\n                open server on the internet is subjected to. It spins up a random server on the AWS\n                cloud and listens for any attempted connections made to that server. Every attempted\n                connection is stored by the application and is used to keep track of who is trying to\n                communicate with our server, where in the world the requests are coming from, and what\n                payload data is being sent with the request.\n            </p>\n            <p>\n                This dashboard shows collections of these metrics displayed in different ways. We have\n                a heatmap which shows the distribution of connection attempts across the world map, a\n                stats page which shows who is trying to connect to our server the most stubbornly, and\n                a live logs page where you can see details of the connection attempts in real time.\n            </p>\n            <Button variant=\"dark\" href=\"https://github.com/bm402/honey-badger\">View project on GitHub</Button>\n        </div>\n    );\n};\n\nexport default About;\n","import { useEffect } from 'react';\nimport { useMap } from 'react-leaflet'\nimport L from 'leaflet'\nimport 'leaflet.heat'\n\nconst HeatmapLayer = () => {\n    const map = useMap();\n\n    useEffect(() => {\n        fetch('https://omf1aavgfc.execute-api.eu-west-2.amazonaws.com/prod/v1/heatmap-data')\n            .then(res => res.json())\n            .then(rawData => rawData.heatmap_data_points)\n            .then(rawDataPoints => {\n\n                let sortedDataPoints = rawDataPoints\n                    .map(point => [point.lat, point.lon, point.count])\n                    .sort(function(a, b){ return a[2]-b[2] });\n\n                let flattenedCount = 1\n                let lastCount = sortedDataPoints[0][2]\n                for (let i = 0; i < sortedDataPoints.length; i++) {\n                    if (sortedDataPoints[i][2] > lastCount) {\n                        flattenedCount++\n                    }\n                    lastCount = sortedDataPoints[i][2]\n                    sortedDataPoints[i][2] = flattenedCount\n                }\n\n                const maxCount = sortedDataPoints[sortedDataPoints.length-1][2]\n                const normalisedDataPoints = sortedDataPoints\n                    .map(point => [point[0], point[1], point[2]/maxCount]);\n\n                const heatmapConfig = {\n                    minOpacity: 0.4,\n                    maxZoom: 3,\n                    radius: 20,\n                    blur: 15,\n                    gradient: {\n                        0.4: 'blue',\n                        0.6: 'lime',\n                        0.8: 'yellow',\n                        0.9: 'orange',\n                        1.0: 'red',\n                    },\n                };\n                \n                L.heatLayer(normalisedDataPoints, heatmapConfig).addTo(map);\n\n                let markerBounds = L.latLngBounds([]);\n                normalisedDataPoints.forEach(normalisedDataPoint => {\n                    markerBounds.extend([normalisedDataPoint[0], normalisedDataPoint[1]]);\n                });\n\n                map.fitBounds(markerBounds);\n            })\n            .catch(console.log);\n\n    }, [map]);\n\n    return null\n}\n\nexport default HeatmapLayer\n","import { MapContainer, TileLayer } from 'react-leaflet'\nimport HeatmapLayer from './heatmap-layer'\n\nimport './heatmap.css';\n\nconst Heatmap = () => {\n    return (\n        <MapContainer className=\"heatmap\">\n            <HeatmapLayer />\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n        </MapContainer>\n    );\n};\n\nexport default Heatmap;\n","import { useEffect } from 'react';\nimport { latLngBounds } from 'leaflet'\nimport { useMap } from 'react-leaflet'\n\nconst StatsMapLayer = props => {\n    const map = useMap();\n\n    useEffect(() => {\n        if (!props.mapData || props.mapData.length === 0) {\n            return;\n        }\n\n        let markerBounds = latLngBounds([]);\n        props.mapData.forEach(mapDataItem => {\n            markerBounds.extend([mapDataItem.lat, mapDataItem.lon]);\n        });\n\n        map.fitBounds(markerBounds, {\n            maxZoom: 10,\n        });\n    }, [map, props.mapData]);\n\n    return null;\n};\n\nexport default StatsMapLayer;\n","export default __webpack_public_path__ + \"static/media/gold.7b323ec2.jpg\";","export default __webpack_public_path__ + \"static/media/silver.9a7c5b0e.jpg\";","export default __webpack_public_path__ + \"static/media/bronze.d1bf6559.jpg\";","import { useState } from 'react'\nimport Card from 'react-bootstrap/Card'\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport Modal from 'react-bootstrap/Modal'\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\nimport StatsMapLayer from './stats-map-layer';\n\nimport GoldMedal from '../images/gold.jpg'\nimport SilverMedal from '../images/silver.jpg' \nimport BronzeMedal from '../images/bronze.jpg'\n\nimport './podium.css'\nimport './loading.css'\n\nconst Podium = props => {\n\n    const [showDetail, setShowDetail] = useState(false);\n    const [detailPosition, setDetailPosition] = useState(0);\n\n    const handleCloseDetail = () => setShowDetail(false);\n    const handleShowDetail = position => {\n        setDetailPosition(position);\n        setShowDetail(true);\n    };\n\n    const createModalMetadata = metadata => {\n        if (!metadata) {\n            return null;\n        }\n\n        return Object.keys(metadata).map(key => (\n            <p className=\"modal-metadata-item\" key={key}>\n                {metadata[key].title}: {formatModalMetadataItemValue(metadata[key].value)}\n            </p>\n        ));\n    };\n\n    const formatModalMetadataItemValue = value => {\n        if (Array.isArray(value)) {\n            return value\n                .sort((a, b) => a.localeCompare(b))\n                .join(', ');\n        }\n        return value;\n    };\n\n    const createModalMap = mapData => {\n        if (!mapData || mapData.length === 0) {\n            return null;\n        }\n\n        return (\n            <MapContainer className=\"statsmap\" maxZoom=\"18\">\n                <StatsMapLayer mapData={mapData} />\n                <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {mapData.map((mapDataItem, key) => (\n                    <Marker position={[mapDataItem.lat, mapDataItem.lon]} key={key}>\n                        {mapDataItem.metadata &&\n                            <Popup>\n                                {createModalMetadata(mapDataItem.metadata)}\n                            </Popup>\n                        }\n                    </Marker>\n                ))}\n            </MapContainer>\n        );\n    }\n\n    return (\n        <div className=\"podium\">\n            <CardDeck>\n                <Card className=\"podium-title-card\">\n                    <Card.Body className=\"podium-title-text\">\n                        <Card.Text>{props.title}</Card.Text>\n                    </Card.Body>\n                </Card>\n                <Card className=\"podium-data-card\" onClick={() => handleShowDetail(0)}>\n                    <Card.Body>\n                        <Card.Img className=\"podium-medal-image\" src={GoldMedal} />\n                        <Card.Text className={`${props.isDataLoaded ? \"\" : \"loading\"} ${\"podium-text-\" + props.type}`}>{props.data[0].value}</Card.Text>\n                    </Card.Body>\n                    <Card.Footer className=\"podium-gold-footer\" />\n                </Card>\n                <Card className=\"podium-data-card\" onClick={() => handleShowDetail(1)}>\n                    <Card.Body>\n                        <Card.Img className=\"podium-medal-image\" src={SilverMedal} />\n                        <Card.Text className={`${props.isDataLoaded ? \"\" : \"loading\"} ${\"podium-text-\" + props.type}`}>{props.data[1].value}</Card.Text>\n                    </Card.Body>\n                    <Card.Footer className=\"podium-silver-footer\" />\n                </Card>\n                <Card className=\"podium-data-card\" onClick={() => handleShowDetail(2)}>\n                    <Card.Body>\n                        <Card.Img className=\"podium-medal-image\" src={BronzeMedal} />\n                        <Card.Text className={`${props.isDataLoaded ? \"\" : \"loading\"} ${\"podium-text-\" + props.type}`}>{props.data[2].value}</Card.Text>\n                    </Card.Body>\n                    <Card.Footer className=\"podium-bronze-footer\" />\n                </Card>\n            </CardDeck>\n            <Modal show={showDetail} onHide={handleCloseDetail}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{props.title}: {props.data[detailPosition].value}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {createModalMetadata(props.data[detailPosition].metadata)}\n                    {createModalMap(props.data[detailPosition].map_data)}\n                </Modal.Body>\n            </Modal>\n        </div>\n    );\n};\n\nexport default Podium;\n","import { useEffect, useState } from 'react';\n\nimport Podium from './podium'\n\nimport './stats.css'\n\nconst Stats = () => {\n    const [isDataLoaded, setIsDataLoaded] = useState(false)\n    const [statsData, setStatsData] = useState({\n        \"most_connections\": [{},{},{}],\n        \"most_active_cities\": [{},{},{}],\n        \"most_active_countries\": [{},{},{}],\n        \"most_ip_addresses\": [{},{},{}],\n        \"most_ingress_ports\": [{},{},{}],\n    });\n\n    useEffect(() => {\n        fetch('https://omf1aavgfc.execute-api.eu-west-2.amazonaws.com/prod/v1/stats-data')\n            .then(res => res.json())\n            .then(data => {\n                setStatsData(data);\n                setIsDataLoaded(true);\n            })\n            .catch(console.log);\n    }, []);\n\n    return (\n        <div className=\"stats-page\">\n            <Podium title=\"Most connection attempts\" data={statsData.most_connections} type=\"number\" isDataLoaded={isDataLoaded} />\n            <Podium title=\"Most active city\" data={statsData.most_active_cities} type=\"string\" isDataLoaded={isDataLoaded} />\n            <Podium title=\"Most active country\" data={statsData.most_active_countries} type=\"string\" isDataLoaded={isDataLoaded} />\n            <Podium title=\"Most IP addresses used\" data={statsData.most_ip_addresses} type=\"number\" isDataLoaded={isDataLoaded} />\n            <Podium title=\"Most ingress ports tried\" data={statsData.most_ingress_ports} type=\"number\" isDataLoaded={isDataLoaded} />\n        </div>\n    );\n};\n\nexport default Stats\n","import { useState } from 'react'\n\nimport './live-logs.css'\n\nconst LiveLogEntry = props => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    return (\n        <tr className={`live-log-entry ${isOpen ? \"open\" : \"closed\"}`}>\n            <td className=\"live-log-entry-field-toggle\" onClick={() => {isOpen ? setIsOpen(false) : setIsOpen(true)}}>{isOpen ? '\\u25bc' : '\\u25b6'}</td>\n            <td className=\"live-log-entry-field timestamp\">{new Date(props.logEntry.timestamp).toLocaleString()}</td>\n            <td className=\"live-log-entry-field ingress-port\">{props.logEntry.ingress_port}</td>\n            <td className=\"live-log-entry-field ip-address\">{props.logEntry.ip_address}</td>\n            <td className=\"live-log-entry-field location\">{props.logEntry.city + ', ' + props.logEntry.country}</td>\n            <td className=\"live-log-entry-field input\">{props.logEntry.input}</td>\n        </tr>\n    );\n};\n\nexport default LiveLogEntry;\n","import { useState } from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Table from 'react-bootstrap/Table'\nimport LiveLogEntry from './live-log-entry';\n\nimport './live-logs.css'\n\nconst LiveLogs = () => {\n    const [websocket, setWebsocket] = useState(null);\n    const [isListening, setIsListening] = useState(false);\n    const [status, setStatus] = useState(\"Disconnected\");\n    const [logEntries, setLogEntries] = useState([]);\n\n    const connectWebsocket = () => {\n        const websocket = new WebSocket('wss://rgs4h7oyra.execute-api.eu-west-2.amazonaws.com/prod');\n        setWebsocket(websocket);\n        setIsListening(true);\n        setStatus(\"Connecting...\");\n\n        websocket.onopen = () => {\n            setStatus(\"Connected\");\n        };\n    \n        websocket.onmessage = (message) => {\n            setLogEntries(logEntries => [...logEntries, JSON.parse(message.data)]);\n        };\n\n        websocket.onclose = () => {\n            setStatus(\"Disconnected\");\n        };\n    };\n\n    const disconnectWebsocket = () => {\n        websocket.close();\n        setIsListening(false);\n    };\n\n    return (\n        <div className=\"live-logs-page\">\n            <div className=\"live-logs-control-panel\">\n                <Button className=\"live-logs-control-panel-button\" variant=\"success\" disabled={isListening} onClick={!isListening ? connectWebsocket : null}>{'\\u25b6'}</Button>\n                <Button className=\"live-logs-control-panel-button\" variant=\"danger\" disabled={!isListening} onClick={isListening ? disconnectWebsocket : null}>{'\\u25a0'}</Button>\n                <div className=\"live-logs-status\">Status: {status}</div>\n            </div>\n            <div className=\"live-logs-log-section\">\n                <Table className=\"live-logs-table\" striped bordered hover size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th className=\"live-log-entry-field-toggle\"></th>\n                            <th className=\"live-log-entry-field timestamp\">Time</th>\n                            <th className=\"live-log-entry-field ingress-port\">Port</th>\n                            <th className=\"live-log-entry-field ip-address\">IP</th>\n                            <th className=\"live-log-entry-field location\">Location</th>\n                            <th className=\"live-log-entry-field input\">Input</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {logEntries.map((logEntry, key) => (\n                            <LiveLogEntry logEntry={logEntry} key={key} />\n                        ))}\n                    </tbody>\n                </Table>\n            </div>\n        </div>\n    );\n};\n\nexport default LiveLogs;\n","import { Switch, Route } from 'react-router-dom';\n\nimport About from './about'\nimport Heatmap from './heatmap'\nimport Stats from './stats'\nimport LiveLogs from './live-logs'\n\nconst Main = () => {\n    return (\n        <Switch>\n            <Route exact path='/' component={About}></Route>\n            <Route exact path='/heatmap' component={Heatmap}></Route>\n            <Route exact path='/stats' component={Stats}></Route>\n            <Route exact path='/live-logs' component={LiveLogs}></Route>\n        </Switch>\n    );\n};\n\nexport default Main;\n","import Navbar from './components/navbar'\nimport Main from './components/main'\n\nimport './App.css';\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <Navbar />\n            <Main />\n        </div>\n    );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render((\n    <HashRouter>\n        <App />\n    </HashRouter>),\n    document.getElementById('root')\n);\n"],"sourceRoot":""}